# -*- coding: utf-8 -*-
"""Project_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CKCT5C-azx47FFS2Ldbnu1R-sEHbzZr6
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install yfinance

"""**Reasoning**:
Import pandas and yfinance, define a list of stock tickers, and download historical stock data using yfinance.


"""

import pandas as pd
import yfinance as yf

tickers = ['RELIANCE.NS', 'TCS.NS', 'HDFCBANK.NS', 'INFY.NS', 'ICICIBANK.NS', 'SBIN.NS', 'BHARTIARTL.NS', 'ITC.NS', 'LT.NS', 'HINDUNILVR.NS', '^NSEI']
start_date = '2020-01-01'
end_date = '2024-01-01'

stock_data = yf.download(tickers, start=start_date, end=end_date)
display(stock_data.head())

daily_returns = stock_data['Close'].pct_change()
display(daily_returns.head())

print("Missing values before handling:")
print(daily_returns.isnull().sum())

daily_returns = daily_returns.dropna()

print("\nMissing values after handling:")
print(daily_returns.isnull().sum())

from sklearn.decomposition import PCA

pca = PCA()
pca.fit(daily_returns)

explained_variance_ratio = pca.explained_variance_ratio_
cumulative_explained_variance = explained_variance_ratio.cumsum()

loadings = pd.DataFrame(pca.components_.T, index=daily_returns.columns, columns=[f'PC{i+1}' for i in range(pca.n_components_)])

print("Explained Variance Ratio for each component:")
print(explained_variance_ratio)

print("\nCumulative Explained Variance Ratio:")
print(cumulative_explained_variance)

print("\nStock Loadings on the first few Principal Components:")
display(loadings.head())

import matplotlib.pyplot as plt


plt.figure(figsize=(10, 6))
plt.bar(range(1, len(explained_variance_ratio) + 1), explained_variance_ratio)
plt.xlabel('Number of Components')
plt.ylabel('Explained Variance Ratio')
plt.title('Scree Plot (Explained Variance Ratio)')
plt.grid(True)


plt.figure(figsize=(10, 6))
plt.plot(range(1, len(cumulative_explained_variance) + 1), cumulative_explained_variance, marker='o', linestyle='--')
plt.xlabel('Number of Components')
plt.ylabel('Cumulative Explained Variance Ratio')
plt.title('Cumulative Explained Variance Ratio')
plt.grid(True)


principal_components = pca.transform(daily_returns)
principal_components_df = pd.DataFrame(principal_components, index=daily_returns.index, columns=[f'PC{i+1}' for i in range(pca.n_components_)])


plt.figure(figsize=(12, 6))
plt.plot(principal_components_df.index, principal_components_df['PC1'])
plt.xlabel('Date')
plt.ylabel('Principal Component 1 Value')
plt.title('First Principal Component Over Time')
plt.grid(True)

plt.show()

-print("Interpretation of Principal Components:")
print("-" * 35)

print("PC1 (Explained Variance: {:.2f}%)".format(explained_variance_ratio[0] * 100))
print("Loadings:")
print(loadings['PC1'].sort_values(ascending=False))
print("Interpretation: PC1 likely represents the overall market movement or a broad market factor, as most stocks have positive loadings on this component. Stocks like ICICIBANK.NS, SBIN.NS, and HDFCBANK.NS have high positive loadings, indicating they are strongly influenced by this overall market factor. ^NSEI (NIFTY50) also has a strong positive loading, reinforcing that PC1 captures the general market trend.")
print("-" * 35)

print("PC2 (Explained Variance: {:.2f}%)".format(explained_variance_ratio[1] * 100))
print("Loadings:")
print(loadings['PC2'].sort_values(ascending=False))
print("Interpretation: PC2 shows a strong positive loading for INFY.NS and TCS.NS. This suggests PC2 might capture factors specific to the IT sector or a divergence between IT stocks and others in the dataset.")
print("-" * 35)

print("PC3 (Explained Variance: {:.2f}%)".format(explained_variance_ratio[2] * 100))
print("Loadings:")
print(loadings['PC3'].sort_values(ascending=False))
print("Interpretation: PC3 has a high positive loading for BHARTIARTL.NS and ITC.NS. This component could represent factors influencing these specific stocks differently from others, potentially related to their respective sectors (telecom and consumer goods).")
print("-" * 35)